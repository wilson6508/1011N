加密(Encryption)

定義：
加密是一種將原始資料(明文)
透過特定演算法轉換成無法輕易理解的格式(密文)的過程，
目的是保護資料在傳輸或儲存時的機密性。

特點：
可逆性：加密過程是可逆的，擁有正確金鑰的人可以將密文解密回原始明文。
保障機密性：確保未經授權者無法理解資料內容。

應用場景：
網路通訊加密(如 HTTPS)。
資料存儲加密(如硬碟加密)。
--------------------------------------------------------------------------------------------
雜湊(Hashing)

定義：
雜湊是一種不可逆的運算過程，
將任意大小的輸入(資料)轉換成固定長度的雜湊值(hash value)，
其目的是檢查資料完整性或用於身份驗證。

特點：
不可逆性：雜湊運算無法從雜湊值還原回原始資料。
輸入敏感性：即使原始輸入僅有一點改變，輸出的雜湊值會完全不同。
固定長度：不論輸入資料的大小，輸出的雜湊值長度固定。

常見演算法：
MD5(已不再建議使用)。
SHA-256(常用於區塊鏈與安全應用)。

應用場景：
密碼存儲(配合加鹽使用)。
資料完整性檢查(如文件的哈希校驗)。
--------------------------------------------------------------------------------------------
加鹽(Salting)

定義：
加鹽是指在資料(通常是密碼)進行雜湊運算前，
先隨機生成一段額外的數據(稱為「鹽」)
並與原資料結合，
以增加雜湊結果的複雜性。

特點：
防範彩虹表攻擊：增加雜湊結果的獨特性，即使多個使用者的密碼相同，經過加鹽後的雜湊值也會不同。
提高破解難度：讓攻擊者無法輕易使用預計算的雜湊表進行暴力破解。

應用：
密碼存儲與驗證：用於增加密碼的安全性，常見於資料庫中密碼的安全處理。
--------------------------------------------------------------------------------------------
彩虹表(Rainbow Table)

定義：
彩虹表是一種預計算的查詢表，存儲了常見明文資料(如密碼)及其對應的雜湊值，
目的是快速破解使用弱雜湊保護的密碼或資料。

原理：
彩虹表利用雜湊演算法，先將大量可能的明文資料進行雜湊運算，並將結果存儲起來。
攻擊者在獲取目標的雜湊值後，可以直接在彩虹表中查找對應的明文資料，
而無需重新計算，大幅降低暴力破解的時間成本。

特點：
節省時間：雖然建立彩虹表需要大量計算，但使用時可以快速查詢，比逐一暴力破解快得多。
依賴固定的雜湊演算法： 彩虹表只能針對特定的雜湊演算法(如 MD5、SHA-1)使用，演算法一旦改變，彩虹表便無效。
適用於弱安全的雜湊： 若密碼沒有加鹽處理，彩虹表攻擊的效果非常顯著。
--------------------------------------------------------------------------------------------
如何防範彩虹表攻擊

加鹽（Salting）：
在密碼進行雜湊運算前加入隨機的鹽值，增加每個雜湊結果的唯一性，避免彩虹表的查詢效果。
例如，密碼「12345」加鹽「abc」後，雜湊值將變成獨特的值，即使另一個使用者的密碼也是「12345」，結果也不同。

使用更強的雜湊演算法：
避免使用已被破解的演算法（如 MD5、SHA-1），改用更安全的選項（如 SHA-256 或 bcrypt）。

限制密碼長度與強度：
要求使用者使用長度更長、組合更複雜的密碼，增加彩虹表建表和查詢的難度。

多因素驗證（MFA）：
即使密碼被破解，利用多因素驗證可以提供額外一層保護。
--------------------------------------------------------------------------------------------